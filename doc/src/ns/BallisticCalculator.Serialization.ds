@group
    @title=Namespace BallisticCalculator.Serialization
    @key=BallisticCalculator.Serialization
    @ingroup=main
    @brief=The classes related to serialization of the library data.

    You can serialize and deserialize data classes:
    [clink=BallisticCalculator.Ammunition]Ammunition[/clink],
    [clink=BallisticCalculator.Atmosphere]Atmosphere[/clink],
    [clink=BallisticCalculator.ZeroingParameters]ZeroingParameters[/clink],
    [clink=BallisticCalculator.Rifling]Rifling[/clink],
    [clink=BallisticCalculator.Rifle]Rifle[/clink],
    [clink=BallisticCalculator.Wind]Wind[/clink],
    [clink=BallisticCalculator.ShotParameters]ShotParameters[/clink],
    [clink=BallisticCalculator.TrajectoryPoint]TrajectoryPoint[/clink], and
    [clink=BallisticCalculator.Reticle.Data.ReticleDefinition]ReticleDefinition[/clink].

    To serialize the object use
    [clink=BallisticCalculator.Serialization.BallisticXmlSerializer]BallisticXmlSerializer[/clink].

    Example: How to serialize a reticle definition.
    ```cs
    xmlDocument = new XmlDocument();
    BallisticXmlSerializer serializer = new BallisticXmlSerializer(xmlDocument);
    xmlDocument.AppendChild(serializer.Serialize(reticle));
    xmlDocument.Save("mildot.reticle");
    ```

    To deserialize the object use
    [clink=BallisticCalculator.Serialization.BallisticXmlDeserializer]BallisticXmlDeserializer[/clink].
    Example: How to read and deserialize a reticle definition
    ```cs
    xmlDocument = new XmlDocument();
    xmlDocument.Load("mildot.reticle");
    BallisticXmlDeserializer deserializer = new BallisticXmlDeserializer();
    var reticle1 = deserializer.Deserialize<ReticleDefinition>(xmlDocument.DocumentElement);
    ```
@end
